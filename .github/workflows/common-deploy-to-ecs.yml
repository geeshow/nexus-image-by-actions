name: Deploy ActiveMQ to Amazon ECR

on:
  workflow_call:
    inputs:
      AWS_REGION:
        required: true
        type: string
      DOCKER_REPOSITORY:
        required: true
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEy:
        required: true

env:
  AWS_REGION: ap-northeast-2
  CONTAINER_NAME: deca-user-container
  ECS_SERVICE: deca-user-service
  ECS_CLUSTER: deca-cluster-gu

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: ${{ inputs.active_profiles }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEy }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker pull ${{ inputs.DOCKER_REPOSITORY }}
          docker tag ${{ inputs.DOCKER_REPOSITORY }} ${{ inputs.ECR_REPOSITORY }}
          docker push ${{ inputs.ECR_REPOSITORY }}

#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: ${{ inputs.ecs_task_definition }}
#          container-name: ${{ env.CONTAINER_NAME }}
#          image: ${{ steps.build-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE }}
#          cluster: ${{ env.ECS_CLUSTER }}
#          wait-for-service-stability: true
